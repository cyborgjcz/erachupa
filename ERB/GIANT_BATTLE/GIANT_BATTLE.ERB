@IS_REMAIN_GIANT_ENEMY(KEYV=-1)
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC KEYV
#DIM DYNAMIC RESULCOUNTER,2
FOR LCOUNT,0,GIANT_ENEMY_ON_BATTLE
    SELECTCASE KEYV
        CASE -1
            SIF GIANT_ENEMY:LCOUNT:3 <= 0
                RESULCOUNTER += 1
            RESULCOUNTER:1 += 1
        CASEELSE
            IF GIANT_ENEMY:LCOUNT:2 == KEYV
                RESULCOUNTER:1 += 1
                SIF GIANT_ENEMY:LCOUNT:3 <= 0
                    RESULCOUNTER += 1
            ENDIF
    ENDSELECT
NEXT
DEBUGPRINTFORML {RESULCOUNTER}, {RESULCOUNTER:1}
IF RESULCOUNTER >= RESULCOUNTER:1
    RETURNF 0
ELSE
    RETURNF 1
ENDIF

;좌표를 인수로 받아 거대로봇전투 적 또는 폭격 경보의 번호를 전달.
;해당 좌표가 비었다면 -1을 전달
@GET_GIANT_ENEMY_NUM(XV,YV)
#FUNCTION
#DIM DYNAMIC XV
#DIM DYNAMIC YV
#DIM DYNAMIC LOOPCOUNT
#DIM DYNAMIC VALUEV
DO
    IF GIANT_ENEMY:LOOPCOUNT:0 == XV && GIANT_ENEMY:LOOPCOUNT:1 == YV && GIANT_ENEMY:LOOPCOUNT:2 > 0
        VALUEV = LOOPCOUNT
        BREAK
    ELSEIF GIANT_ALERT:LOOPCOUNT:0 == XV && GIANT_ALERT:LOOPCOUNT:1 == YV && GIANT_ALERT:LOOPCOUNT:2 > 0
        VALUEV = LOOPCOUNT + 361
        BREAK
    ENDIF
    LOOPCOUNT += 1    
    IF LOOPCOUNT >= 361
        VALUEV = -1
        BREAK
    ENDIF
LOOP 1
RETURNF VALUEV

@GET_GIANT_ENEMY_ID(NUMV)
#FUNCTION
#DIM DYNAMIC NUMV
IF NUMV < 361 && NUMV >= 0
    RETURNF GIANT_ENEMY:NUMV:2
ELSEIF NUMV >= 361
    RETURNF GIANT_ALERT:(NUMV - 361):2
ELSE
    RETURNF -1
ENDIF

@CHECK_RIGHT_THERE_GIANT_ENEMY(KEYV)
#DIM DYNAMIC KEYV
#DIM DYNAMIC LCOUNT
SELECTCASE KEYV
    CASE 0
        CALL D3D_GET_FRONT_COORD(D3D_PLAYER_XCOORD,D3D_PLAYER_YCOORD)
    CASE 2
        CALL D3D_GET_BEHIND_COORD(D3D_PLAYER_XCOORD,D3D_PLAYER_YCOORD)
ENDSELECT
SELECTCASE GET_GIANT_ENEMY_NUM(RESULT:0,RESULT:1)
    CASE -1
        RETURN 0
    CASE 0 TO 360
        RETURN 1
    CASE 361 TO 721
        RETURN 0
ENDSELECT

;포괄적인 공격 기능 함수 제 1인수는 박치기인지, 무기 공격인지 판별
@GIGANT_ATTACK(ISWEAPONV,TARGETV,ISENEMY=-1,DIRECTION=-1)
#DIM DYNAMIC ISWEAPONV;무기 이용 여부, 플레이어 공격일때 반영
#DIM DYNAMIC TARGETV;대상. 플레이어 공격일 때는 GET_GIANT_ENEMY_NUM을 이용 플레이어일경우 -2
#DIM DYNAMIC ISENEMY;적 여부 -1이면 플레이어가 공격,아닐경우 적 인덱스에서 찾음
#DIM DYNAMIC DIRECTION;방향 -1이면 판단하지 않음(플레이어 공격일 때)
#DIM DYNAMIC SRCSTATV
#DIM DYNAMIC DAMAGEV
SIF TARGETV == -1
    RETURN 0
IF ISENEMY == -1
    ;플레이어 공격
    IF ISWEAPONV != 0
        ;무기 공격
        SRCSTATV = GET_GIGANT_MODED_STAT(GIGANT_무기,GIGANT_출력)
    ELSE
        ;몸통 박치기
        SRCSTATV = GET_GIGANT_TOTAL_STAT(GIGANT_출력) - GET_GIGANT_MODED_STAT(GIGANT_무기,GIGANT_출력)
    ENDIF
ELSEIF ISENEMY != -1
    IF ISENEMY < 361
        ;통상 적 ID 영역
        SRCSTATV = GIANT_ENEMY:ISENEMY:4
    ELSE
        ;경보 적 ID 영역
        SRCSTATV = GIANT_ALERT:(ISENEMY-361):4
    ENDIF
ENDIF
DEBUGPRINTFORML ISENEMY = {ISENEMY} SRCSTATV = {SRCSTATV}
;대미지 난수 보정
DAMAGEV = (SRCSTATV * (90 + RAND:10))/100
SIF DIRECTION == 2
    TIMES DAMAGEV, 1.2
DEBUGPRINTFORML DAMAGEV = {DAMAGEV}
SELECTCASE TARGETV
    CASE 0 TO 360
        ;무적판정이 걸려있는 적은 대미지 무효화
        IF GIANT_ENEMY:TARGETV:5 == 1
            TIMES DAMAGEV, 0.0
        ELSEIF GIANT_ENEMY:TARGETV:5 == 2
            SIF ISENEMY == -1
                TIMES DAMAGEV, 0.0
        ENDIF
ENDSELECT

IF TARGETV == -2
    ;플레이어 기간트에게 각 부위 대미지 분산 및 전도 대미지 부여
    CALL APPLY_DAMAGE_GIGANT(DAMAGEV,DIRECTION)
    CALL GET_DOWN_DAMAGE_GIGANT(DAMAGEV/1000)
ELSE
    ;적에게 대미지 부여 및 다운판정
    GIANT_ENEMY:TARGETV:3 -= DAMAGEV
    SIF GIANT_ENEMY:TARGETV:3 < 0
        GIANT_ENEMY:TARGETV:3 = 0
ENDIF
RETURN DAMAGEV

;기간트의 각 부위에 대미지를 분산하여 전달
@APPLY_DAMAGE_GIGANT(DAMAGEV,DIRECTION)
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC DAMAGEV
#DIM DYNAMIC DIRECTION;0정면,1오른쪽,2후방,3왼쪽
#DIM DYNAMIC TOAPPLY,8;각부위에 전달하는 대미지

FOR LCOUNT,0,8
    TOAPPLY:LCOUNT = DAMAGEV
NEXT

SELECTCASE DIRECTION
    CASE 0
        TIMES TOAPPLY:GIGANT_머리, 0.05
        TIMES TOAPPLY:GIGANT_몸통, 0.35
        TIMES TOAPPLY:GIGANT_왼팔, 0.15
        TIMES TOAPPLY:GIGANT_오른팔, 0.15
        TIMES TOAPPLY:GIGANT_등짝, 0.0
        TIMES TOAPPLY:GIGANT_다리, 0.25
        TIMES TOAPPLY:GIGANT_무기, 0.05
        TIMES TOAPPLY:GIGANT_기타, 0.0
    CASE 1
        TIMES TOAPPLY:GIGANT_머리, 0.05
        TIMES TOAPPLY:GIGANT_몸통, 0.15
        TIMES TOAPPLY:GIGANT_왼팔, 0.0
        TIMES TOAPPLY:GIGANT_오른팔, 0.30
        TIMES TOAPPLY:GIGANT_등짝, 0.20
        TIMES TOAPPLY:GIGANT_다리, 0.25
        TIMES TOAPPLY:GIGANT_무기, 0.05
        TIMES TOAPPLY:GIGANT_기타, 0.0
    CASE 2
        TIMES TOAPPLY:GIGANT_머리, 0.1
        TIMES TOAPPLY:GIGANT_몸통, 0.15
        TIMES TOAPPLY:GIGANT_왼팔, 0.1
        TIMES TOAPPLY:GIGANT_오른팔, 0.1
        TIMES TOAPPLY:GIGANT_등짝, 0.4
        TIMES TOAPPLY:GIGANT_다리, 0.35
        TIMES TOAPPLY:GIGANT_무기, 0.1
        TIMES TOAPPLY:GIGANT_기타, 0.0
    CASE 3
        TIMES TOAPPLY:GIGANT_머리, 0.05
        TIMES TOAPPLY:GIGANT_몸통, 0.15
        TIMES TOAPPLY:GIGANT_왼팔, 0.30
        TIMES TOAPPLY:GIGANT_오른팔, 0.0
        TIMES TOAPPLY:GIGANT_등짝, 0.20
        TIMES TOAPPLY:GIGANT_다리, 0.25
        TIMES TOAPPLY:GIGANT_무기, 0.05
        TIMES TOAPPLY:GIGANT_기타, 0.0
ENDSELECT

FOR LCOUNT,0,8
    GIGANT_DAMAGE:LCOUNT += TOAPPLY:LCOUNT
NEXT
RETURN 1

;전도 대미지 계산
@GET_DOWN_DAMAGE_GIGANT(DAMAGEV)
#DIM DYNAMIC DAMAGEV
#DIM DYNAMIC STABILITYV
#DIM DYNAMIC NUMV
SIF GIGANT_TUMBLE != 0
    RETURN 0
;피격 불안정 대미지 보정. 이미 대미지를 받고 있을수록 받는 양이 커진다
STABILITYV = GET_GIGANT_TOTAL_STAT(GIGANT_안정성)
NUMV = (STABILITYV / 100) * 25
SELECTCASE STABILITYV - GIGANT_DOWN_DAMAGE
    CASE NUMV * 3 + 1 TO STABILITYV
        TIMES DAMAGEV, 0.35
    CASE NUMV * 2 + 1 TO NUMV * 3
        TIMES DAMAGEV, 0.70
    CASE NUMV + 1 TO NUMV * 2
        TIMES DAMAGEV, 1.05
    CASE 1 TO NUMV
        TIMES DAMAGEV, 1.15
ENDSELECT
;자세 불안정 보정
SELECTCASE GIGANT_UNSTABILITY
    CASE 0
    CASE 1
        TIMES DAMAGEV, 1.25
    CASE 2
        TIMES DAMAGEV, 1.50
    CASE 3
        TIMES DAMAGEV, 1.75
    CASEELSE
        TIMES DAMAGEV, 2.00
ENDSELECT

GIGANT_DOWN_DAMAGE += DAMAGEV
SIF GIGANT_DOWN_DAMAGE >= STABILITYV
    CALL GET_TUMBLE_GIGANT
RETURN 1

;이벤트 구상 출력과 연출 등을 할 예정이므로 자리만 만든다
@GET_TUMBLE_GIGANT
CALL SHAKE_SCREEN
GIGANT_TUMBLE = 1
RETURN 1

;그저 기능을 명확하게 해두기 위한 함수
@DOWN_DAMAGE_RECOVER(KEYV=0)
#DIM DYNAMIC KEYV
SIF !GIGANT_TUMBLE
    TIMES GIGANT_DOWN_DAMAGE, 0.75
SIF KEYV != 0
    TIMES GIGANT_DOWN_DAMAGE, 0.25
SIF GIGANT_DOWN_DAMAGE < GET_GIGANT_TOTAL_STAT(GIGANT_안정성)
    GIGANT_TUMBLE = 0
RETURN 1

;플레이어의 NUMV(0은 바로 앞) 칸 근처에 XV,YV가 위치하는지 체크하는 함수
@NEAR_PLAYER(XV,YV,NUMV)
#FUNCTION
#DIM DYNAMIC XV
#DIM DYNAMIC YV
#DIM DYNAMIC NUMV
SELECTCASE NUMV
    CASE 0
        ;바로 붙어있는 경우
        {
            IF (XV >= D3D_PLAYER_XCOORD - 1 && XV <= D3D_PLAYER_XCOORD + 1 && YV == D3D_PLAYER_YCOORD) ||
            (YV >= D3D_PLAYER_YCOORD - 1 && YV <= D3D_PLAYER_YCOORD + 1 && XV == D3D_PLAYER_XCOORD)
        }
            RETURNF 1
        ELSE
            RETURNF 0
        ENDIF
    CASEELSE
        {
            IF XV >= D3D_PLAYER_XCOORD - NUMV && XV <= D3D_PLAYER_XCOORD + NUMV &&
            YV >= D3D_PLAYER_YCOORD - NUMV && YV <= D3D_PLAYER_YCOORD + NUMV
        }
            RETURNF 1
        ELSE
            RETURNF 0
        ENDIF
ENDSELECT

;플레이어 바로 근처 칸에 있는 대상이 D3D_PLAYER_DIRECTION 기준 어느 방향인지 확인
@NEAR_PLAYER_DIRECTION(XV,YV)
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC XV
#DIM DYNAMIC YV
#DIM DYNAMIC TEMPV
FOR LCOUNT,0,4
    SELECTCASE LCOUNT
        CASE 0
            CALL D3D_GET_FRONT
            IF XV == RESULT:0 && YV == RESULT:1
                TEMPV = 0
                BREAK
            ENDIF
        CASE 1
            CALL D3D_GET_RIGHT
            IF XV == RESULT:0 && YV == RESULT:1
                TEMPV = 1
                BREAK
            ENDIF
        CASE 2
            CALL D3D_GET_BEHIND
            IF XV == RESULT:0 && YV == RESULT:1
                TEMPV = 2
                BREAK
            ENDIF
        CASE 3
            CALL D3D_GET_LEFT
            IF XV == RESULT:0 && YV == RESULT:1
                TEMPV = 3
                BREAK
            ENDIF
    ENDSELECT
NEXT
RETURN TEMPV