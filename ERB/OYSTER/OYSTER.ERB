;CALL OYSTER_SCENE(15,14)
;와 같이 호출하고 RETURN 에 따라 1, 또는 2를 받아 양쪽 아이돌의 승패를 판정한다.
;

@OYSTER_SCENE(CNO1,CNO2)
#DIM DYNAMIC CNO1
#DIM DYNAMIC CNO2

#DIM DYNAMIC GRAVITYV
#DIM DYNAMIC LCOUNT

#DIM DYNAMIC BALL,19,2
#DIM DYNAMIC IDOL_A,19,2
#DIM DYNAMIC IDOL_B,19,2
;OYSTER.ERH 확인
#DIM DYNAMIC MLTV = 1 ; 좌우 이동 음수or양수 배수
#DIM DYNAMIC BOUNCEV = OY_DEFAULT_BOUNCEV ;충돌시 8로 초기화되는 바운스 높이 배수
#DIM DYNAMIC IN_COLLISION;이미 충돌 중일 때
#DIM DYNAMIC JUMP_COLLISION;점프 중 충돌
#DIM DYNAMIC SERVE = 1
GCREATEFROMFILE 0, @"oyster_dummy.png"
CALL OYSTER_SET_SPRITE(CNO1,CNO2)
STOPBGM
;
;SETBGMVOLUME 0
;
SIF EXISTSOUND("o1.mp3")
    PLAYBGM "o1.mp3"

BALL:OY_ID:0 = 0
IDOL_A:OY_ID:0 = 1
IDOL_B:OY_ID:0 = 2
IDOL_A:OY_GAUGE:OY_HP = OY_HPMAX
IDOL_B:OY_GAUGE:OY_HP = OY_HPMAX

IDOL_A:OY_IMAGE_NUM:0 = 1
IDOL_A:OY_COORD:0 = DOTTIMES(CLIENTWIDTH(),1,4)-(OY_SPRITE_SIZE/2)
IDOL_A:OY_COORD:1 = 0
IDOL_B:OY_IMAGE_NUM:0 = 13
IDOL_B:OY_COORD:0 = DOTTIMES(CLIENTWIDTH(),3,4)-(OY_SPRITE_SIZE/2)
IDOL_B:OY_COORD:1 = 0

CALL OYSTER_MOVE_IDOL(IDOL_A)
CALL OYSTER_MOVE_IDOL(IDOL_B)

BALL:OY_COORD:0 = (IDOL_A:OY_COLLISION:0) - 50
BALL:OY_COORD:1 = (IDOL_A:OY_COLLISION:1)
CALL OYSTER_SET_BALL(IDOL_A:OY_COLLISION:0,(IDOL_A:OY_COLLISION:0),1,BALL)
BALL:OY_STATUS:0 = 2
BALL:OY_TARGET:0 = BALL:OY_COORD:0, BALL:OY_COORD:1
BALL:OY_DIRECTION_NEXT:0 = OY_RIGHT
DO
    ;화면 초기
    CBGCLEAR

    ;아이돌 처리
    IF OY_GAME_PAUSE < 1
        IF IDOL_A:OY_GAUGE:OY_HP <= 0
            IDOL_B:OY_SCORE:0 ++
            OY_GAME_PAUSE = 1
        ELSEIF IDOL_B:OY_GAUGE:OY_HP <= 0
            IDOL_A:OY_SCORE:0 ++
            OY_GAME_PAUSE = 1
        ENDIF
    ENDIF

    CALL OYSTER_MOVE_IDOL(IDOL_A)
    CALL OYSTER_MOVE_IDOL(IDOL_B)

    ;볼 처리

    ;볼 자유낙하 전환
    SIF BALL:OY_TIME:0 >= BALL:OY_DURATION:0 && BALL:OY_COORD:1 < 0
        BALL:OY_STATUS:0 = 2
    ;충돌처리
    IF OY_IS_COLLIDING(BALL,IDOL_A) || OY_IS_COLLIDING(BALL,IDOL_B)
        IF !IN_COLLISION
            IF OY_TOUCHED == 1
                IN_COLLISION = 1
                IF GETBIT(IDOL_A:OY_STATUS:0,2)
                    CLEARBIT IDOL_A:OY_STATUS:0,2
                    JUMP_COLLISION = 1
                ELSE
                    JUMP_COLLISION = 0
                ENDIF
            ELSEIF OY_TOUCHED == 2
                IN_COLLISION = 2
                IF GETBIT(IDOL_B:OY_STATUS:0,2)
                    CLEARBIT IDOL_B:OY_STATUS:0,2
                    JUMP_COLLISION = 1
                ELSE
                    JUMP_COLLISION = 0
                ENDIF
            ENDIF
            CALL OYSTER_COLLISION_BOUNCE(BALL,RESULT,RESULT:1,IN_COLLISION,JUMP_COLLISION)
            BOUNCEV = OY_DEFAULT_BOUNCEV
        ENDIF
        IF IN_COLLISION == 1 && IDOL_A:OY_COORD:1 < 0
            ;이미지 조작
            IDOL_A:OY_IMAGE_NUM:0 = 2
        ELSEIF IN_COLLISION == 2 && IDOL_B:OY_COORD:1 < 0
            ;이미지 조작
            IDOL_B:OY_IMAGE_NUM:0 = 11
        ENDIF
    ELSE
        IN_COLLISION = 0
    ENDIF
    ;자유낙하 도중 추락처리
    IF BALL:OY_COORD:1 >= -60
        SELECTCASE BALL:OY_STATUS:0
            CASE 0
            CASE 1,2,3
                CALL OYSTER_SET_BALL(BALL:OY_COORD:0 + ((BALL:OY_DIRECTION:0)*(30*BOUNCEV)),BALL:OY_COORD:1,1,BALL)
                BALL:OY_STATUS:0 = 1
                BALL:OY_TARGET:0 = BALL:OY_COORD:0, -60
                ;게임 일시 정지 및 득점 처리
                IF !OY_GAME_PAUSE
                    SELECTCASE BALL:OY_COORD:0
                        CASE IS >= CLIENTWIDTH()/2
                            IDOL_A:OY_SCORE:0 ++
                            SERVE = 1
                        CASEELSE
                            SERVE = 2
                            IDOL_B:OY_SCORE:0 ++
                    ENDSELECT
                    OY_GAME_PAUSE = 1
                ENDIF
                ;바운스 배수 감소
                SIF BOUNCEV > 4
                    BOUNCEV --
                ;멈춤처리
                IF BOUNCEV == 4
                    BALL:OY_STATUS:0 = 0
                    BALL:OY_STATUS_NEXT:0 = 0
                ENDIF
            CASE 3
        ENDSELECT
    ENDIF
    IF BALL:OY_COORD:0 < 0 || BALL:OY_COORD:0 >= CLIENTWIDTH()
        MLTV = BALL:OY_DIRECTION:0 * -1
        CALL OYSTER_SET_BALL(BALL:OY_COORD:0 + (30*BOUNCEV*MLTV),BALL:OY_COORD:1,1,BALL)
        BALL:OY_STATUS:0 = 1
        BALL:OY_TARGET:0 = BALL:OY_COORD:0, BALL:OY_COORD:1
    ENDIF

    ;볼 실제 이동
    CALL OYSTER_MOVE_BALL(BALL)
    CBGSETG IDOL_A:OY_IMAGE_NUM:0,IDOL_A:OY_COORD:0,IDOL_A:OY_COORD:1,1
    CBGSETG IDOL_B:OY_IMAGE_NUM:0,IDOL_B:OY_COORD:0,IDOL_B:OY_COORD:1,1
    CBGSETG 0,BALL:OY_COORD:0-(OY_BALL_SIZE/2),BALL:OY_COORD:1-(OY_BALL_SIZE/2),1
    GCLEAR 17,0x00000000
    GCREATE 17,100,5
    GSETBRUSH 17,0xFFFF0000
    SIF IDOL_A:OY_GAUGE:OY_HP
        GFILLRECTANGLE 17,0,0,(IDOL_A:OY_GAUGE:OY_HP)*2,5
    GCLEAR 18,0x00000000
    GCREATE 18,100,5
    GSETBRUSH 18,0xFFFF0000
    SIF IDOL_B:OY_GAUGE:OY_HP
        GFILLRECTANGLE 18,0,0,(IDOL_B:OY_GAUGE:OY_HP)*2,5
    CBGSETG 17,(IDOL_A:OY_COORD:0)+40,(IDOL_A:OY_COORD:1)-80,1    
    CBGSETG 18,(IDOL_B:OY_COORD:0)+40,(IDOL_B:OY_COORD:1)-80,1    
    PRINTFORML %NAME:CNO1% : {IDOL_A:OY_SCORE:0} HP: {IDOL_A:OY_GAUGE:OY_HP}
    PRINTFORML %NAME:CNO2% : {IDOL_B:OY_SCORE:0} HP: {IDOL_B:OY_GAUGE:OY_HP}
    TWAIT 1,1
    CALL OYSTER_CONTROL_IDOL(IDOL_A,BALL)
    CALL OYSTER_CONTROL_IDOL(IDOL_B,BALL)
    SIF OY_GAME_PAUSE && OY_GAME_PAUSE < OY_PAUSE_TIME
        OY_GAME_PAUSE ++
    IF OY_GAME_PAUSE >= OY_PAUSE_TIME
        IF IDOL_A:OY_GAUGE:OY_HP < 1
            CALL OYSTER_CLEAR_SPRITE
            RETURN 2
        ELSEIF IDOL_B:OY_GAUGE:OY_HP < 1
            CALL OYSTER_CLEAR_SPRITE
            RETURN 1
        ENDIF
        IDOL_A:OY_COORD:0 = DOTTIMES(CLIENTWIDTH(),1,4)-(OY_SPRITE_SIZE/2)
        IDOL_A:OY_COORD:1 = 0
        IDOL_B:OY_COORD:0 = DOTTIMES(CLIENTWIDTH(),3,4)-(OY_SPRITE_SIZE/2)
        IDOL_B:OY_COORD:1 = 0
        CALL OYSTER_MOVE_IDOL(IDOL_A)
        CALL OYSTER_MOVE_IDOL(IDOL_B)
        SELECTCASE SERVE
            CASE 1
                BALL:OY_COORD:0 = (IDOL_A:OY_COLLISION:0) - 50
                BALL:OY_COORD:1 = (IDOL_A:OY_COLLISION:1)
                CALL OYSTER_SET_BALL(IDOL_A:OY_COLLISION:0,(IDOL_A:OY_COLLISION:0),1,BALL)
                BALL:OY_STATUS:0 = 2
                BALL:OY_TARGET:0 = BALL:OY_COORD:0, BALL:OY_COORD:1
                BALL:OY_DIRECTION_NEXT:0 = OY_RIGHT
            CASE 2
                BALL:OY_COORD:0 = (IDOL_B:OY_COLLISION:0) + 50
                BALL:OY_COORD:1 = (IDOL_B:OY_COLLISION:1)
                CALL OYSTER_SET_BALL(IDOL_B:OY_COLLISION:0,(IDOL_B:OY_COLLISION:0),1,BALL)
                BALL:OY_STATUS:0 = 2
                BALL:OY_TARGET:0 = BALL:OY_COORD:0, BALL:OY_COORD:1
                BALL:OY_DIRECTION_NEXT:0 = OY_LEFT
        ENDSELECT
        IDOL_A:OY_GAUGE:OY_HP += 5
        IDOL_B:OY_GAUGE:OY_HP += 5
        SIF IDOL_A:OY_GAUGE:OY_HP > OY_HPMAX
            IDOL_A:OY_GAUGE:OY_HP = OY_HPMAX
        SIF IDOL_B:OY_GAUGE:OY_HP > OY_HPMAX
            IDOL_B:OY_GAUGE:OY_HP = OY_HPMAX
        OY_GAME_PAUSE = 0
    ENDIF
    CLEARLINE 2
    CLEARLINE 3
    PRINTFORML {BALL:OY_DURATION:0} - {BALL:OY_TIME:0} ({BALL:OY_DURATION:0 - BALL:OY_TIME:0}) < {DOTTIMES(BALL:OY_DURATION:0,8,30)}
    PRINTFORML 스파이크가능 {ABLE_TO_SPIKE(IDOL_A,BALL)} {ABLE_TO_SPIKE(IDOL_B,BALL)}
    PRINTFORML Y좌표 {BALL:OY_COORD:1}
    REUSELASTLINE
    ;이하 테스트용 임시 입력처리
    [SKIPSTART]
    TONEINPUTS 25,"탌",0,""
    SELECTCASE RESULTS
        CASE "a"
            SETBIT IDOL_B:OY_STATUS:0,3
            IDOL_B:OY_DIRECTION:0 = OY_LEFT
            IDOL_B:OY_SPEED:0 = 20
            RESULT = 1
        CASE "s"
            IDOL_B:OY_SPEED:0 = 0
            CLEARBIT IDOL_B:OY_STATUS:0,2
        CASE "d"
            SETBIT IDOL_B:OY_STATUS:0,3
            IDOL_B:OY_DIRECTION:0 = OY_RIGHT
            IDOL_B:OY_SPEED:0 = 20
            RESULT = 1
        CASE " "
            IF !GETBIT(IDOL_B:OY_STATUS:0,2)
                SETBIT IDOL_B:OY_STATUS:0,2
                IDOL_B:OY_HIGH:0 = 1
                RESULT = 1
            ENDIF
        CASE ""
            RESULT = 0
        CASEELSE
            RESULT = 1
    ENDSELECT
    CLEARLINE RESULT
    REUSELASTLINE
    [SKIPEND]
LOOP 1


SIF EXISTSOUND(BGM_BEFORE_BATTLE)
    PLAYBGM BGM_BEFORE_BATTLE