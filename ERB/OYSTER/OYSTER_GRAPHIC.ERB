@OYSTER_SET_SPRITE(CNO1,CNO2=0)
#DIM DYNAMIC CNO1
#DIM DYNAMIC CNO2
#DIM DYNAMIC NUMV
#DIM DYNAMIC REPEATV = 1
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC METADATAVA,8,2
SIF CNO2
    REPEATV ++

METADATAVA:0:0 = 0,0
METADATAVA:1:0 = OY_SRC_SIZE/4,0
METADATAVA:2:0 = (OY_SRC_SIZE/4)*2,0
METADATAVA:3:0 = (OY_SRC_SIZE/4)*3,0
METADATAVA:4:0 = 0,OY_SRC_SIZE/4
METADATAVA:5:0 = OY_SRC_SIZE/4,OY_SRC_SIZE/4
METADATAVA:6:0 = 0,(OY_SRC_SIZE/4)*2
METADATAVA:7:0 = 0,(OY_SRC_SIZE/4)*3

REPEAT REPEATV
    SELECTCASE COUNT
        CASE 0
            NUMV = CNO1
        CASE 1
            NUMV = CNO2
    ENDSELECT
    GCREATEFROMFILE (8*COUNT)+9,@"mili/oyster/oyster_chr_%TOSTR(NUMV,"D3")%.png"
    FOR LCOUNT,1,9
        GCREATE (8*COUNT)+LCOUNT,OY_SRC_SIZE/4,OY_SRC_SIZE/4
        GDRAWG (8*COUNT)+LCOUNT,(8*COUNT)+9,0,0,OY_SPRITE_SIZE,OY_SPRITE_SIZE,METADATAVA:(LCOUNT-1):0,METADATAVA:(LCOUNT-1):1,OY_SRC_SIZE/4,OY_SRC_SIZE/4
    NEXT
    GDISPOSE (8*COUNT)+9
REND

;공의 목적지를 설정하는 함수
@OYSTER_SET_BALL(TARGETX,TARGETY,HOWV,BALL)
#DIM DYNAMIC TARGETX
#DIM DYNAMIC TARGETY
#DIM DYNAMIC HOWV
#DIM REF BALL,0,0

;NEXT 항에 예정 정보들을 대입한다
;이동 방식
BALL:OY_STATUS_NEXT:0 = HOWV
BALL:OY_TARGET_NEXT:0 = TARGETX,TARGETY
SELECTCASE BALL:OY_TARGET:0
    CASE IS < BALL:OY_TARGET:0
        BALL:OY_DIRECTION_NEXT:0 = OY_RIGHT
    CASE IS > BALL:OY_TARGET:0
        BALL:OY_DIRECTION_NEXT:0 = OY_LEFT
ENDSELECT

;공의 실제 이동
@OYSTER_MOVE_BALL(BALL)
#DIM REF BALL,0,0
#DIM DYNAMIC GRAVITYV

SIF !BALL:OY_STATUS:0 && !BALL:OY_STATUS_NEXT:0
    RETURN 0
IF BALL:OY_TIME:0 >= BALL:OY_DURATION:0 && BALL:OY_STATUS:0 != 2
    ;목표 도착 설정
    BALL:OY_COORD:0 = BALL:OY_TARGET:0
    BALL:OY_COORD:1 = BALL:OY_TARGET:1
    ;움직이는 상태 갱신
    BALL:OY_STATUS:0 = BALL:OY_STATUS_NEXT:0
    ;예정된 상태값의 초기화
    BALL:OY_STATUS_NEXT:0 = 0
    ;목표 좌표 갱신
    BALL:OY_TARGET:0 = BALL:OY_TARGET_NEXT:0
    BALL:OY_TARGET:1 = BALL:OY_TARGET_NEXT:1
    ;예정된 목표 좌표 초기화
    BALL:OY_TARGET_NEXT:0 = 0
    BALL:OY_TARGET_NEXT:1 = 0
    ;목표 방향 갱신
    BALL:OY_DIRECTION:0 = BALL:OY_DIRECTION_NEXT:0
    ;0이 되어 부정의 값이 된 경우 0일 수는 없으므로 새로 설정
    IF !BALL:OY_DIRECTION:0
        SELECTCASE BALL:OY_COORD:0
            CASE IS < BALL:OY_TARGET:0
                BALL:OY_DIRECTION:0 = OY_RIGHT
            CASE IS > BALL:OY_TARGET:0
                BALL:OY_DIRECTION:0 = OY_LEFT
        ENDSELECT
    ENDIF
    ;초기화
    BALL:OY_DIRECTION_NEXT:0 = 0
    BALL:OY_TIME:0 = 0
    BALL:OY_DURATION:0 = ABS(BALL:OY_TARGET:0 - BALL:OY_COORD:0)
    ;거리에 따른 속도 설정
    SELECTCASE BALL:OY_DURATION:0
        CASE IS > 999
            BALL:OY_HIGH:0 = 1
            BALL:OY_SPEED:0 = 40
            BALL:OY_DURATION:0 /= 40
        CASE 750 TO 999
            BALL:OY_HIGH:0 = 3
            BALL:OY_SPEED:0 = 32
            BALL:OY_DURATION:0 /= 32
        CASE 500 TO 749
            BALL:OY_HIGH:0 = 5
            BALL:OY_SPEED:0 = 24
            BALL:OY_DURATION:0 /= 24
        CASE 250 TO 499
            BALL:OY_HIGH:0 = 6
            BALL:OY_SPEED:0 = 16
            BALL:OY_DURATION:0 /= 16
        CASE 0 TO 249
            BALL:OY_HIGH:0 = 7
            BALL:OY_SPEED:0 = 8
            BALL:OY_DURATION:0 /= 8
    ENDSELECT
ENDIF
BALL:OY_TIME:0 ++
;볼의 좌표를 실제로 변화시키는 차례
SELECTCASE BALL:OY_STATUS:0
    CASE 0
    CASE 1
        BALL:OY_COORD:0 += BALL:OY_DIRECTION:0 * BALL:OY_SPEED:0
        ;포물선 운동
        CALL OYTSER_SET_GRAV_QUADRA(GRAVITYV,BALL:OY_TIME:0,BALL:OY_DURATION:0,BALL)
        BALL:OY_FREEFALL:0 = GRAVITYV
        BALL:OY_COORD:1 += GRAVITYV
    CASE 2
        ;자유낙하
        BALL:OY_COORD:0 += BALL:OY_DIRECTION:0 * BALL:OY_SPEED:0
        BALL:OY_COORD:1 += BALL:OY_FREEFALL:0
        ;자유낙하가속
        TIMES BALL:OY_FREEFALL:0,1.15
    CASE 3
ENDSELECT

;공이 매번 움직이는 장면에서 중력값 변경
@OYTSER_SET_GRAV_QUADRA(GRAVITYV,TIMEV,DURAV,BALL)
#DIM REF GRAVITYV;변화시키는 중력
#DIM REF BALL,0,0
#DIM DYNAMIC TIMEV;전달받은 현재진행시간
#DIM DYNAMIC DURAV;진행해야하는 총 시간

#DIM DYNAMIC MODV

#DIM DYNAMIC GRAVITYA,101
#DIM DYNAMIC STARTV
#DIM DYNAMIC KEYV
#DIM DYNAMIC MULTIV
#DIM DYNAMIC LCOUNT2 = 0
#DIM DYNAMIC LCOUNT3 = 50
REPEAT 100
    GRAVITYA:LCOUNT3 = DOTTIMES(0-SQRT(2500-POWER(LCOUNT2-50,2)),3,14)
    LCOUNT3 ++
    SIF LCOUNT3 >= 100
        LCOUNT3 = 0
    LCOUNT2 ++
REND
GRAVITYA:100 = GRAVITYA:99

SELECTCASE DURAV-TIMEV
    CASE IS < (DURAV/2)+1
        ;절반 이하 진행
        STARTV = 50
        MULTIV = -1
        TIMEV -= DURAV/2
    CASE IS >= (DURAV/2)+1
        ;절반 이상 진행
        STARTV = 0
        MULTIV = 1
ENDSELECT

MODV = GRAVITYA:(STARTV + (DOTTIMES(50,TIMEV,(DURAV/2))))
;중력 배수
SELECTCASE BALL:OY_HIGH:0
    CASE 10
        TIMES MODV,1.00
    CASE 9
        TIMES MODV,0.90
    CASE 8
        TIMES MODV,0.80
    CASE 7
        TIMES MODV,0.70
    CASE 6
        TIMES MODV,0.60
    CASE 5
        TIMES MODV,0.50
    CASE 4
        TIMES MODV,0.40
    CASE 3
        TIMES MODV,0.30
    CASE 2
        TIMES MODV,0.20
    CASE 1
        TIMES MODV,0.10
    CASE 0
        TIMES MODV,0.05
ENDSELECT
GRAVITYV += (MODV * MULTIV)

@OYSTER_MOVE_IDOL(IDOL_DATA)
#DIM REF IDOL_DATA,0,0
#DIM DYNAMIC MULTIV = 1
#DIM DYNAMIC NUMV

;아이돌 스프라이트 이동
MULTIV = IDOL_DATA:OY_DIRECTION:0
IDOL_DATA:OY_COORD:0 += IDOL_DATA:OY_SPEED:0 * MULTIV
SIF IDOL_DATA:OY_SPEED:0 > 0
    IDOL_DATA:OY_SPEED:0 --

;아이돌 충돌 판정 데이터 작성
NUMV = IDOL_DATA:OY_IMAGE_NUM:0
SIF NUMV > 8
    NUMV %= 8
SELECTCASE NUMV
    CASE 1,2,4,7
        IDOL_DATA:OY_COLLISION:0 = IDOL_DATA:OY_COORD:0 + 96
        IDOL_DATA:OY_COLLISION:1 = IDOL_DATA:OY_COORD:1 - 128
    CASE 3,5,6,8
        IDOL_DATA:OY_COLLISION:0 = IDOL_DATA:OY_COORD:0 + 72
        IDOL_DATA:OY_COLLISION:1 = IDOL_DATA:OY_COORD:1 - 128
ENDSELECT

;곱하기 분수를 실현하는 노가다 함수
@DOTTIMES(NUMV,SMALLV,BIGV)
#FUNCTION
#DIM DYNAMIC NUMV
#DIM DYNAMIC SMALLV
#DIM DYNAMIC BIGV
SIF !BIGV
    BIGV = 1
SELECTCASE (SMALLV*10000)/(BIGV*100)
CASE 99
TIMES NUMV,0.99
CASE 98
TIMES NUMV,0.98
CASE 97
TIMES NUMV,0.97
CASE 96
TIMES NUMV,0.96
CASE 95
TIMES NUMV,0.95
CASE 94
TIMES NUMV,0.94
CASE 93
TIMES NUMV,0.93
CASE 92
TIMES NUMV,0.92
CASE 91
TIMES NUMV,0.91
CASE 90
TIMES NUMV,0.90
CASE 89
TIMES NUMV,0.89
CASE 88
TIMES NUMV,0.88
CASE 87
TIMES NUMV,0.87
CASE 86
TIMES NUMV,0.86
CASE 85
TIMES NUMV,0.85
CASE 84
TIMES NUMV,0.84
CASE 83
TIMES NUMV,0.83
CASE 82
TIMES NUMV,0.82
CASE 81
TIMES NUMV,0.81
CASE 80
TIMES NUMV,0.80
CASE 79
TIMES NUMV,0.79
CASE 78
TIMES NUMV,0.78
CASE 77
TIMES NUMV,0.77
CASE 76
TIMES NUMV,0.76
CASE 75
TIMES NUMV,0.75
CASE 74
TIMES NUMV,0.74
CASE 73
TIMES NUMV,0.73
CASE 72
TIMES NUMV,0.72
CASE 71
TIMES NUMV,0.71
CASE 70
TIMES NUMV,0.70
CASE 69
TIMES NUMV,0.69
CASE 68
TIMES NUMV,0.68
CASE 67
TIMES NUMV,0.67
CASE 66
TIMES NUMV,0.66
CASE 65
TIMES NUMV,0.65
CASE 64
TIMES NUMV,0.64
CASE 63
TIMES NUMV,0.63
CASE 62
TIMES NUMV,0.62
CASE 61
TIMES NUMV,0.61
CASE 60
TIMES NUMV,0.60
CASE 59
TIMES NUMV,0.59
CASE 58
TIMES NUMV,0.58
CASE 57
TIMES NUMV,0.57
CASE 56
TIMES NUMV,0.56
CASE 55
TIMES NUMV,0.55
CASE 54
TIMES NUMV,0.54
CASE 53
TIMES NUMV,0.53
CASE 52
TIMES NUMV,0.52
CASE 51
TIMES NUMV,0.51
CASE 50
TIMES NUMV,0.50
CASE 49
TIMES NUMV,0.49
CASE 48
TIMES NUMV,0.48
CASE 47
TIMES NUMV,0.47
CASE 46
TIMES NUMV,0.46
CASE 45
TIMES NUMV,0.45
CASE 44
TIMES NUMV,0.44
CASE 43
TIMES NUMV,0.43
CASE 42
TIMES NUMV,0.42
CASE 41
TIMES NUMV,0.41
CASE 40
TIMES NUMV,0.40
CASE 39
TIMES NUMV,0.39
CASE 38
TIMES NUMV,0.38
CASE 37
TIMES NUMV,0.37
CASE 36
TIMES NUMV,0.36
CASE 35
TIMES NUMV,0.35
CASE 34
TIMES NUMV,0.34
CASE 33
TIMES NUMV,0.33
CASE 32
TIMES NUMV,0.32
CASE 31
TIMES NUMV,0.31
CASE 30
TIMES NUMV,0.30
CASE 29
TIMES NUMV,0.29
CASE 28
TIMES NUMV,0.28
CASE 27
TIMES NUMV,0.27
CASE 26
TIMES NUMV,0.26
CASE 25
TIMES NUMV,0.25
CASE 24
TIMES NUMV,0.24
CASE 23
TIMES NUMV,0.23
CASE 22
TIMES NUMV,0.22
CASE 21
TIMES NUMV,0.21
CASE 20
TIMES NUMV,0.20
CASE 19
TIMES NUMV,0.19
CASE 18
TIMES NUMV,0.18
CASE 17
TIMES NUMV,0.17
CASE 16
TIMES NUMV,0.16
CASE 15
TIMES NUMV,0.15
CASE 14
TIMES NUMV,0.14
CASE 13
TIMES NUMV,0.13
CASE 12
TIMES NUMV,0.12
CASE 11
TIMES NUMV,0.11
CASE 10
TIMES NUMV,0.10
CASE 9
TIMES NUMV,0.09
CASE 8
TIMES NUMV,0.08
CASE 7
TIMES NUMV,0.07
CASE 6
TIMES NUMV,0.06
CASE 5
TIMES NUMV,0.05
CASE 4
TIMES NUMV,0.04
CASE 3
TIMES NUMV,0.03
CASE 2
TIMES NUMV,0.02
CASE 1
TIMES NUMV,0.01
CASE 0
TIMES NUMV,0.00
ENDSELECT
RETURNF NUMV